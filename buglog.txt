Debugging:
gdb bootimg
target remote 10.0.2.2:1234

Broken image:
rm bootimg
rm mp3.img
git checkout mp3.img

######

Buglog (James):

# Checkpoint 1

Problem: Issues using batch script to launch boot image

Problem: Initializing GDT
https://www.tldp.org/HOWTO/Linux-Init-HOWTO-4.html
https://www.google.com/search?q=linux+gdt+initialize&oq=linux+gdt+initialize&aqs=chrome..69i57j33.3746j0j7&sourceid=chrome&ie=UTF-8
Problem: Undefined reference to gdt while doing lgdt gdt?
Solution: Check what is in .globl in .S file, contains pointer to gdt

Problem: Make output error -> sudo: unable to execute ./debug.sh: No such file or directory
Solution: https://piazza.com/class/k5nafawx3fj2v3?cid=628
Run 
dos2unix debug.sh
chmod +x debug.sh
make clean && make

Problem: #include x86_desc.h in asm .S file and set up descriptor pointer?
Solution: Pseudo descriptor format containing base address (first gdt entry) and limit (size of table - 1)

Problem: What is .align doing?
Solution: http://www.keil.com/support/man/docs/armasm/armasm_dom1361290002364.htm

Problem: Issue with passing gdtr pseduo descriptor
Solution: Pad before gdt descriptor for gdtr

Problem: Still bootlooping
Solution: https://piazza.com/class/k5nafawx3fj2v3?cid=631, week8 discussion
RUN_TESTS macro, test is throwing fault on boot due to IDT calls failing, comment out run_tests macro

Problem: IDT linkage
Solution: arch/i386/kernel/head.S:367 -> It doesn't actually load idt - that can be done only after paging has been enabled and the kernel moved to PAGE_OFFSET. Interrupts are enabled elsewhere, when we can be relatively sure everything is ok.
https://lwn.net/Articles/109375/
https://lwn.net/Articles/21846/

Problem: Interrupt / trap vectors
4.8.3

Problem: How to test throw exceptions?
Solution: Divide by error -> a / 0 should throw an error

# Checkpoint 2

Problem: Print output displaying to top of screen after fully filled

Problem: Paging keeps crashing/boot looping
Solution: Improper video memory spacing, need to change something in lib.c
Solution2: Fixed paging; forgot to map video mem physical address to page's virtual address

Problem: Warnings on declaring structs within another struct if struct is not defined above it.
Solution: The struct being declared is moved above

Problem: strncmp had issues checking equality during filename check
Solution: Set equality condition on strncmp by checking equivalence with 0

# Checkpoint 3

Problem: Page fault when dir_entry_t type is declared on the open function as a pointer
Solution: Declared an instance of the object instead of a pointer, otherwise memory is not being used

Problem: flush_tlb linkage not found
Solution: Must expose it as global label in asm

Problem: When creating the parse command function, assignment makes pointer from integer without a cast
Solution: To set the new starting address of the array, need to dereference the array first.

Problem: Assignment of read-only function
Solution: Don't use const in the arguments if you want to be able to write to the string.

Problem: Reading command does not break out of a loop
Solution: Always increment your index if you use an index in a while loop

Problem: Strange bug that fills the buffer with special characters on the first word of the command.
Solution: Still working on it.

# Checkpoint 4
Problem: Vidmap causing pagefault after iret
Solution: Likely an issue with how address was being passed as a nullptr
Solution: Could not debug fish directly, but using info mem helped immensely to uncover the problem

Problem: Fish printing weird line endings (musical notes) as \r into video memory
Solution: Issue with how fish must have been uploaded to the filesystem. We added several test programs into the filesystem, which likely contain DOS line endings. This was fixed by checking out an old copy of an unmodified file system image.

#####
Buglog (Michael)

CP1
Bug: The interrupt handlers were executing correctly, but sometimes for
the ones that don't pause afterwards they were causing weird crashes. This
was fixed by adding a an assembly wrapper around the c functions which
finish with IRET.

Bug: After implementing some PIC stuff, the qemu window would close during
the hlt-jmp loop. This was fixed by resetting some masks on the PIC so that
interrupts could go through, which prevented qemu from closing.

CP2:
Problem: Typing in ctrl-l (clearing screen) and then backspace causes an error
Solution: Previously the only check on backspace was that the buffer wasn't empty. Now, also
check that the cursor can go backwards (ie. that it isn't in the top left).

Problem: After making some changes to the keyboard driver, the text was working
when typing in lower case letters, but when the shift/capslock/alt key was pressed
it would stop working completely.
Solution: The function handling the interrupt sets the interrupt flag and sends the
PIC and EOI signal at the end. However, certain keys caused the function to return
earlier and I forgot to reenable interrupts and send the EOI in this case. The fix
was to add these lines wherever the function returned.

CP3:
Problem: shell would page fault when an invalid command is entered
Solution: the pid was being changed even if the execute failed. Changed this so the pid
changes after all the checks.

Problem: shell fails when it trys to execute a command
Solution: The filename was stored as a user mode pointer, but this becomes invalid when the page table is
updated. The solution was to create a local kernel buffer and copy the program name into it.

Problem: halt not working properly
Solution: Forgot to set TSS esp0 so the kernel stacks would overwrite each other for each process.
It is fixed by setting esp0 whenever the task switches.

CP4:
Problem: Page fault when a program calls getargs
Solution: Forgot to update the jump table used by the assembly linkage.

Problem: Using cat with a file only works the first time. After that it fails.
Solution: The getargs didn't always put a terminating null character in the buffer
string, so the call to open failed. This was fixed by adding an extra statement.

CP5:
Problem: Running ls too many times causes it to fail on directory open.
Solution: File descriptors weren't being closed correctly when a user program
halts, so calling open failed as all the file descriptors were full from
previous times. The fix was to correctly set all file descriptors to closed.

Problem: Able to delete the 391OS> prompt after fish.
Solution: This is caused by the keyboard buffer filling up when the user types while the
program runs. The fix was to show the contents in the buffer after the program finishes
so that backspace will delete that text and not the prompt.

Problem: Running "cat rtc" while pingpong is running in another terminal causes pingpong
to permanently slow down.
Solution: Opening the rtc file causes rtc frequency to be set very low, but the frequency
wasn't being correctly set back when the scheduler changes programs. The solution was to
add a check if the frequency needs to be changed and if it does, to change the rtc frequency.

######

Buglog (Ben):

CP1:
Problem: sudo: unable to execute ./debug.sh: No such file or directory
Solution: Piazza -> dos2unix debug.sh; chmod +x debug.sh; make clean; make;

Problem Keyboard wasnt printing anything
Solution: Added James' RTC files and called test_interrupt in tests.c

Problem RTC handler not being called
Solution: problem with send_eoi in i8259.c worked after fixing

CP2:
Problem: rtc_write, dereferencing void* pointer, void value not ignored compiler message
Solution: *((int*)buf) needed to cast the void pointer to a pointer type then dereference

Problem: Keyboard prints a random character after the pressed character
Solution: Make sure keyboard doesn't read the scancode of the release

Problem: Page-fault exception when backspacing after ctrl + l sometimes
Solution: Program had problem with video memory, check if cursor is on top left

CP3:
Problem: Halt not able to return to parent process
Solution: Fix PCB_t struct to include base pointer as an attribute so we can return from halt

Problem: Not sure how to check whether an exception occured in user or kernel
Solution: Piazza advice, checking DS register can differentiate whether using KERNEL_DS or USER_DS

CP5:
Problem: Pagefault exception when changing process tracking from global variable to a global process array
Solution: Improper code sequence, had to move the locations of some code

Problem: Processes not limited to 6 even though changed to process tracking with global process array
Solution: Wasn't setting the current process to used after finding next free process_id
######

Buglog (Jin)

cp1
Problem: compiler error "undefined reference" error with "collect 2: ld returned 1 exit status" in idt_init.c 
The linkage error was kept appearing during compile. 
Solution: Piazza post helped find the solution that the error may be caused by unincluded header file. 
Included the right header file and error disappeared. 

cp2
Problem: "Ignoring packet error " when using target remote to test_debug with gdb on Devel. 
Solution: It was normal error and piazza post explained that closing and reopening test_debug 
while still in gdb command line on devel. Reopend test_debug and redid target remote to boot the OS. 


cp3
problem: the implemented test case for system call did not invoke any systemcalls
Solution: First, I thought it was a problem of my assembly linkage code but later found out that
the test case asm volatile code was implemented incorrectly. I had to put '=a' for the output 
to get the return value from eax register after the system call in kernel. 

Problem: the wrapper for the system call assembly linkage doesn't invoke syscall functions in kernel space. 
Solution: the sequence of how registers are stored was wrong. Fixed it by pushing registers in the right sequence in the
assembly linkage.

problem: open systemcall not working, ls user function is not outputting anything on the terminal
solution: The implementation of the function pointer to open was not initialized correctly. It was fixed by 
having the file operations pointer pointing to the open function pointer. 

cp5
problem: First terminal didn't execute shell properly after implementing multiple terminal funtionality in the keyboard and terminal drivers
solution: Added the execution of shell in the first terminal initialization and commented out the original execute shell command on the kernel.c file. 
This implementation was later replaced by the init_shells function after the scheduler is implemented and merged with the system. 

problem: video memory backup physical memory address wasn't specified (allocated) so video backup was not mapped correctly upon initialization. Keyboard buffer and current buffer length for each terminal was not implemented correctly. 
solution: Specified video memory backup address by allocating 4kb for each of the terminals (each video memory). In addition, created the terminal struct that stores and tracks each terminal's keyboard buffer and current buffer length. 







